#ifndef SHAPE_HPP
#define SHAPE_HPP

#include <string> 

class Shape {

    // Public members can be accessed from outside the class and form part of the class's public interface.
public: 

    // CONSTRUCTOR: initialization of a member of the class;
    Shape(const std::string& name);

    // Declaration of getName method;
    // 'const' (after the method parameters):
    // This const keyword is used after the parameter list and before the opening curly brace. 
    // It is part of the method definition, and it indicates that this method is a "const member function." 
    // This means that it promises not to modify the state of the class instance on which it is called. 
    // It is a way of ensuring that the method doesn't modify the object it is called on, 
    // making it safe to call on const instances of the class.
    const std::string& getName() const;

    // Declaration of getArea method;
    // 'virtual' keyword indicates that the function getArea is a virtual function. 
    // In C++, a virtual function is a member function of a class that can be overridden by derived classes. 
    // It allows for polymorphism, which means that different derived classes can provide their own implementations of this function.
    // The fact that it is initialized to 0 means that it is a pure virtual function,
    // meaning that is has no implementation in the base class and must be implemented in derived classes.
    // 'const' (after the method parameters):
    // It means that the member function is promising not to modify the state of the object it is called on. 
    // It is a way of ensuring that the method doesn't modify the object it is called on,
    virtual double getArea() const = 0;

    // DESTRUCTOR: it is called when the object is destroyed; 
    // A destructor is a special member function in C++ that is automatically called when an object is destroyed 
    // (e.g., when it goes out of scope or when delete is called for dynamically allocated objects). 
    // The destructor has the same name as the class but is preceded by a tilde ~.
    // Making it 'virtual' is a good practice when you have a class hierarchy with polymorphism. 
    // A virtual destructor ensures that the correct destructor is called for objects of derived classes 
    // when they are deleted. If the base class destructor is not virtual, then when you delete a derived 
    // class object through a pointer to the base class, the derived class destructor might not be called, 
    // leading to resource leaks. By marking the destructor as virtual, you ensure that the destructor of 
    // the most derived class in the hierarchy is called when an object is deleted through a base class pointer.
    // The '= default' syntax specifies that this is a default destructor. A default destructor is a destructor 
    // that is automatically generated by the compiler when no custom destructor is defined. In this case, '= default' 
    // is used to indicate that the default destructor should be used.
    // A default destructor typically performs cleanup of any resources allocated by the class. 
    // If your class doesn't have any specific resource management requirements, you can rely on the default destructor.
    virtual ~Shape() = default;

    // Private members are not accessible from outside the class and are used to encapsulate the class's internal details.
private:

    // This line declares a private member variable named _name. 
    // It is an instance of the std::string class and is used to store the name of the shape.
    std::string _name;
};

// The class Circle is derived from the base class Shape.
// It is a polymorphic class, indeed meaning that it overrides the virtual function getArea.

class Circle : public Shape { // this is the syntax for inheritance
public:

    // This is the constructor of the class Circle.
    // As parameters, it takes a double named radius and a string named name.
    Circle(double radius);

    // 'override' is a keyword that tells the compiler that this function is overriding a function in the base class, 
    // you need to specify const as specified in the base class
    virtual double getArea() const override;

    // this is the syntax for a virtual destructor of the derived class
    virtual ~Circle() = default;

private:

    // This line declares a private member variable named _radius.
    double _radius;
};

// The class Rectangle is derived from the base class Shape.
// It is a polymorphic class, indeed meaning that it overrides the virtual function getArea.

class Rectangle : public Shape {
public:
    Rectangle(double width, double height);
    virtual double getArea() const override;
    virtual ~Rectangle() = default;

private:
    double _width;
    double _height;
};

#endif  // SHAPE_HPP
